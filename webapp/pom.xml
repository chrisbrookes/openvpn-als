<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.adito</groupId>
        <artifactId>adito</artifactId>
        <version>0.9.2-SNAPSHOT</version>
    </parent>

    <artifactId>webapp</artifactId>
    <name>webapp</name>

    <!-- When the server (=webapp) component is packaged as WAR, the modules
	 depending on it at buildtime (=extensions) can't find it from the
	 (local) maven2 repository. Currently we're only interested in getting
	 the web application to work so that's ok. -->

    <packaging>war</packaging>

    <description>
	Adito web application
    </description>

    <profiles>
    </profiles>

    <!-- This plugin configuration is necessary because the extensions (e.g. unix, applications)
	 look for a webapp-*.jar from the local Maven2 repository, but the WAR packaging does not
	 create one. The solution was combined from those found from here:

	 http://communitygrids.blogspot.com/2007/11/maven-making-war-and-jar-at-same-time.html -->

    <build>

	<plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-jar-plugin</artifactId>
			<executions>
				<execution>
					<id>make-a-jar</id>
					<phase>compile</phase>
					<goals>
						<goal>jar</goal>
					</goals>
				</execution>
			</executions>
		</plugin>

		<!-- Exploded WAR works best for us until OpenVPN ALS is a standard
		     web application

			http://maven.apache.org/plugins/maven-war-plugin/exploded.html
		-->


		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-war-plugin</artifactId>
			<version>2.1.1</version> 
			<executions>
				<execution>
					<goals>
						<goal>exploded</goal>
					</goals>
				</execution>
			</executions>

			<!-- Suggested for JSP precompiling (jspc-maven-plugin). Seems
			     to work without, though. For more info, take a look here:

				http://mojo.codehaus.org/jspc-maven-plugin/usage.html
			-->
			<!--
			<configuration>
				<webXml>${basedir}/target/jspweb.xml</webXml>
			</configuration>
			-->

		</plugin>

		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-install-plugin</artifactId>
			<executions>
				<execution>
					<phase>install</phase>
					<goals>
						<goal>install-file</goal>
					</goals>
					<configuration>
						<packaging>jar</packaging>
						<artifactId>${project.artifactId}</artifactId>
						<groupId>${project.groupId}</groupId>
						<version>${project.version}</version>
						<file>${project.build.directory}/${project.artifactId}-${project.version}.jar</file>
					</configuration>
				</execution>
			</executions>
		</plugin>
        <!-- 
		<plugin>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>jspc-maven-plugin</artifactId>
			<executions>
				<execution>
					<id>jspc</id>
					<goals>
						<goal>compile</goal>
					</goals>
				</execution>
			</executions>
        </plugin>
        -->
	</plugins>
    </build>


    <dependencies>
	<dependency>
		<groupId>jetty</groupId>
		<artifactId>jasper-compiler</artifactId>
		<version>4.2.20RC0</version>
		<!-- Running ALS fails if this is present at runtime -->
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>tomcat</groupId>
		<artifactId>jasper-runtime</artifactId>
		<version>5.5.23</version>
		<!-- Running ALS fails if this is present at runtime -->
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>tanukisoft</groupId>
		<artifactId>wrapper</artifactId>
		<version>3.2.3</version>
	</dependency>
	<dependency>
		<groupId>commons-logging</groupId>
		<artifactId>commons-logging</artifactId>
		<version>1.1</version>
	</dependency>
	<dependency>
		<groupId>org.jdom</groupId>
		<artifactId>jdom</artifactId>
		<version>1.1</version>
	</dependency>

	<!-- Although the actual webapp does not require
	     the following modules, the networkplaces module
	     expects them to be at webapp/WEB-INF/lib.

	     We need a recent version of commons-vfs to
	     have support for all providers (e.g. webdav)
	     the ALS networkplaces module supports
	-->


	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-vfs</artifactId>
		<version>2.0-SNAPSHOT</version>
	</dependency>

	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-vfs-sandbox</artifactId>
		<version>2.0-SNAPSHOT</version>
	</dependency>

	<dependency>
		<groupId>org.samba.jcifs</groupId>
		<artifactId>jcifs</artifactId>
		<version>1.2.19</version>
	</dependency>

	<dependency>
		<groupId>com.jcraft</groupId>
		<artifactId>jsch</artifactId>
		<version>0.1.41</version>
		<scope>runtime</scope>
	</dependency>

	<!-- At least Tomcat spits out errors if servlet-jsp
	     is included in Adito server WAR -->
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
		<artifactId>jsp-api</artifactId>
		<version>2.1</version>
<!--		<scope>provided</scope> -->
	</dependency>

	<!-- At least Tomcat spits out errors if servlet-api
	     is included in Adito server WAR -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>servlet-api</artifactId>
		<version>2.4</version>
		<scope>provided</scope>
	</dependency>




	<!-- Adito has been written for Struts 1.2.8. Latest
	     Struts classic (1.3.10) is missing some classes
	     found in the old one, so we can't use it without
	     code modifications. Struts 1.2.8 struts module
	     contains everything Adito needs. In 1.3.10
	     functionality was spread to several modules. -->
	     
	<dependency>
		<groupId>struts</groupId>
		<artifactId>struts</artifactId>
		<version>1.2.8</version>
	</dependency>

	<!-- Internal Adito dependencies -->

	<dependency>
		<groupId>com.adito</groupId>
		<artifactId>maverick-multiplex</artifactId>
		<version>${project.version}</version>
	</dependency>

	<!-- Adito needs an old 1.1.5 version of
	     ajaxtags, as 1.3 seemed to have a slightly
	     modified API -->

	<dependency>
		<groupId>org.ajaxtags</groupId>
		<artifactId>ajaxtags</artifactId>
		<version>1.1.5</version>
	</dependency>

	<dependency>
		<groupId>com.adito</groupId>
		<artifactId>maverick-crypto</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>com.adito</groupId>
		<artifactId>maverick-ssl</artifactId>
		<version>${project.version}</version>
	</dependency>
	<dependency>
		<groupId>commons-logging</groupId>
		<artifactId>commons-logging</artifactId>
		<version>1.1</version>
	</dependency>
	<dependency>
		<groupId>org.jdom</groupId>
		<artifactId>jdom</artifactId>
		<version>1.1</version>
	</dependency>

	<!-- Does this need to be defined?
	include name="javax.servlet.jar"
	-->


	<!-- Adito needs to use an old (5.x) version of Jetty.
	     Newer ones have different API and won't work
	     without modifications.  In nonembedded is not
	     anymore required -->

	<dependency>
    		<groupId>jetty</groupId>
    		<artifactId>org.mortbay.jetty</artifactId>
    		<version>5.1.12</version>
	</dependency>

	<dependency>
		<groupId>hsqldb</groupId>
		<artifactId>hsqldb</artifactId>
		<version>1.8.0.7</version>
	</dependency>

	<!-- Adito uses org.apache.commons.cache, which seems to
	     be an unmaintained, sandboxed component. No official
	     releases of it have been made. The component seems
	     not to be available from any Maven repository. See
	     these pages for more info:

	     * http://commons.apache.org/sandbox/index.html
	     * http://commons.apache.org/sandbox/cache/

	     For now, we're using the jar from Adito and
	     guessing 0.1 as the proper version

	-->
	
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>cache</artifactId>
		<version>0.1</version>
	</dependency>

	<!-- RSS feed stuff requires ROME (RSS and atOM utilitiEs for Java).
	     The original version used in Adito was 0.7 -->

	<dependency>
		<groupId>rome</groupId>
		<artifactId>rome</artifactId>
		<version>0.9</version>
	</dependency>

	<dependency>
		<groupId>commons-net</groupId>
		<artifactId>commons-net</artifactId>
		<version>2.0</version>
	</dependency> 

	<!-- Test-scoped dependencies -->

	<!-- NOTE: these dependencies should be all the tests need, but
	most of them fail with the following error message:
	
	"Unable to autoload servlet: com.adito.core.CoreServlet:
	javax.servlet.UnavailableException: Failed to initialise system
	database."

	-->


	<dependency>
		<groupId>org.easymock</groupId>
		<artifactId>easymock</artifactId>
		<version>2.4</version>
		<scope>test</scope>
	</dependency>

	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.4</version>
		<scope>test</scope>
	</dependency>

	<dependency>
		<groupId>strutstestcase</groupId>
		<artifactId>strutstestcase</artifactId>
		<version>2.1.4-1.2-2.4</version>
		<scope>test</scope>
	</dependency>

	<dependency>
		<groupId>httpunit</groupId>
		<artifactId>httpunit</artifactId>
		<version>1.6.1</version>
		<scope>test</scope>
	</dependency>

	<dependency>
		<groupId>bouncycastle</groupId>
		<artifactId>bcprov-jdk15</artifactId>
		<version>133</version>
		<!-- 
		<groupId>org.bouncycastle</groupId>
		<artifactId>bcprov-jdk12</artifactId>
		<version>130</version>
		<scope>test</scope>
		-->
	</dependency>


    </dependencies>
</project>
